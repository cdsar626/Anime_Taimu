---
/**
 * TimeCalculator Component
 * Provides time calculation with OP/ED controls and real-time updates
 * Requirements: 4.1, 4.2, 4.3, 4.4, 4.5
 */

export interface Props {
  anime?: {
    episodes: number | null;
    duration: number | null;
  } | null;
  initialIncludeOpening?: boolean;
  initialIncludeEnding?: boolean;
  onCalculationChange?: (result: any) => void;
}

const { 
  anime, 
  initialIncludeOpening = false, 
  initialIncludeEnding = false,
  onCalculationChange 
} = Astro.props;

// Import the time calculator functions
const hasValidAnime = anime && typeof anime.episodes === 'number' && anime.episodes > 0;
---

<div class="time-calculator" data-testid="time-calculator">
  {hasValidAnime ? (
    <div class="time-calculator__content animate-fade-in">
      <div class="time-calculator__header">
        <h3 class="time-calculator__title">Watch Time Calculator</h3>
        <p class="time-calculator__subtitle">Customize your viewing experience</p>
      </div>

      <div class="time-calculator__controls">
        <div class="time-calculator__checkbox-group">
          <label class="time-calculator__checkbox-label">
            <input
              type="checkbox"
              class="time-calculator__checkbox"
              id="include-opening"
              data-testid="include-opening"
              checked={initialIncludeOpening}
            />
            <span class="time-calculator__checkbox-custom"></span>
            <span class="time-calculator__checkbox-text">
              Include Opening Themes
              <span class="time-calculator__checkbox-detail">(+1m 30s per episode)</span>
            </span>
          </label>

          <label class="time-calculator__checkbox-label">
            <input
              type="checkbox"
              class="time-calculator__checkbox"
              id="include-ending"
              data-testid="include-ending"
              checked={initialIncludeEnding}
            />
            <span class="time-calculator__checkbox-custom"></span>
            <span class="time-calculator__checkbox-text">
              Include Ending Themes
              <span class="time-calculator__checkbox-detail">(+1m 30s per episode)</span>
            </span>
          </label>
        </div>
      </div>

      <div class="time-calculator__result" data-testid="calculation-result">
        <div class="time-calculator__result-header">
          <span class="time-calculator__result-label">Total Watch Time</span>
        </div>
        <div class="time-calculator__result-value" id="total-time">
          <span class="time-calculator__calculating">Calculating...</span>
        </div>
        <div class="time-calculator__result-breakdown" id="time-breakdown">
          <!-- Breakdown will be populated by JavaScript -->
        </div>
      </div>
    </div>
  ) : (
    <div class="time-calculator__empty">
      <div class="time-calculator__empty-icon">
        <svg width="48" height="48" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z" fill="currentColor"/>
        </svg>
      </div>
      <p class="time-calculator__empty-message">
        Search for an anime to calculate watch time
      </p>
    </div>
  )}
</div>

<style>
  .time-calculator {
    width: 100%;
    max-width: 500px;
    margin: 0 auto;
  }

  /* Empty State */
  .time-calculator__empty {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-md);
    padding: var(--space-2xl);
    text-align: center;
    background: rgba(64, 224, 208, 0.05);
    border: 2px dashed var(--primary-aqua-light);
    border-radius: var(--radius-lg);
  }

  .time-calculator__empty-icon {
    color: var(--text-secondary);
    opacity: 0.6;
  }

  .time-calculator__empty-message {
    color: var(--text-secondary);
    font-size: var(--font-size-lg);
    margin: 0;
  }

  /* Content */
  .time-calculator__content {
    background: var(--surface);
    border: 2px solid var(--primary-aqua-light);
    border-radius: var(--radius-xl);
    padding: var(--space-xl);
    box-shadow: var(--shadow-md);
    transition: all var(--transition-normal);
  }

  .time-calculator__content:hover {
    box-shadow: var(--shadow-lg);
    transform: translateY(-2px);
  }

  .time-calculator__header {
    text-align: center;
    margin-bottom: var(--space-xl);
  }

  .time-calculator__title {
    font-size: var(--font-size-xl);
    font-weight: 600;
    color: var(--text-primary);
    margin: 0 0 var(--space-xs) 0;
    background: linear-gradient(135deg, var(--primary-aqua), var(--primary-aqua-dark));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .time-calculator__subtitle {
    font-size: var(--font-size-sm);
    color: var(--text-secondary);
    margin: 0;
    font-style: italic;
  }

  /* Controls */
  .time-calculator__controls {
    margin-bottom: var(--space-xl);
  }

  .time-calculator__checkbox-group {
    display: flex;
    flex-direction: column;
    gap: var(--space-lg);
  }

  .time-calculator__checkbox-label {
    display: flex;
    align-items: flex-start;
    gap: var(--space-md);
    cursor: pointer;
    padding: var(--space-md);
    border-radius: var(--radius-lg);
    transition: all var(--transition-fast);
    position: relative;
    background: rgba(64, 224, 208, 0.02);
    border: 2px solid transparent;
  }

  .time-calculator__checkbox-label:hover {
    background: rgba(64, 224, 208, 0.08);
    border-color: var(--primary-aqua-light);
    transform: translateX(4px);
  }

  .time-calculator__checkbox-label:focus-within {
    outline: 2px solid var(--primary-aqua);
    outline-offset: 2px;
  }

  .time-calculator__checkbox {
    position: absolute;
    opacity: 0;
    width: 0;
    height: 0;
  }

  .time-calculator__checkbox-custom {
    width: 24px;
    height: 24px;
    border: 2px solid var(--primary-aqua-light);
    border-radius: var(--radius-sm);
    background: var(--surface);
    position: relative;
    transition: all var(--transition-normal);
    flex-shrink: 0;
    margin-top: 2px;
  }

  .time-calculator__checkbox-custom::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0);
    width: 12px;
    height: 12px;
    background: linear-gradient(135deg, var(--primary-aqua), var(--primary-aqua-dark));
    border-radius: var(--radius-xs);
    transition: all var(--transition-normal);
  }

  .time-calculator__checkbox:checked + .time-calculator__checkbox-custom {
    background: rgba(64, 224, 208, 0.1);
    border-color: var(--primary-aqua);
    box-shadow: 0 0 0 3px rgba(64, 224, 208, 0.2);
  }

  .time-calculator__checkbox:checked + .time-calculator__checkbox-custom::after {
    transform: translate(-50%, -50%) scale(1);
  }

  .time-calculator__checkbox-text {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: var(--space-xs);
  }

  .time-calculator__checkbox-text {
    font-size: var(--font-size-base);
    font-weight: 500;
    color: var(--text-primary);
    line-height: 1.4;
  }

  .time-calculator__checkbox-detail {
    font-size: var(--font-size-sm);
    color: var(--text-secondary);
    font-weight: 400;
    font-style: italic;
  }

  /* Result Display */
  .time-calculator__result {
    background: linear-gradient(135deg, rgba(64, 224, 208, 0.1), rgba(127, 255, 212, 0.05));
    border: 2px solid var(--primary-aqua-light);
    border-radius: var(--radius-lg);
    padding: var(--space-lg);
    text-align: center;
    position: relative;
    overflow: hidden;
  }

  .time-calculator__result::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(64, 224, 208, 0.1), transparent);
    transition: left var(--transition-slow);
  }

  .time-calculator__result.updating::before {
    left: 100%;
  }

  .time-calculator__result-header {
    margin-bottom: var(--space-md);
  }

  .time-calculator__result-label {
    font-size: var(--font-size-sm);
    font-weight: 500;
    color: var(--text-secondary);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .time-calculator__result-value {
    font-size: var(--font-size-3xl);
    font-weight: 700;
    color: var(--primary-aqua-dark);
    margin-bottom: var(--space-md);
    min-height: 3rem;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .time-calculator__calculating {
    font-size: var(--font-size-lg);
    color: var(--text-secondary);
    font-weight: 400;
    opacity: 0.8;
    animation: pulse 2s infinite;
  }

  .time-calculator__result-breakdown {
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
    font-size: var(--font-size-sm);
    color: var(--text-secondary);
    opacity: 0;
    transform: translateY(10px);
    transition: all var(--transition-normal);
  }

  .time-calculator__result-breakdown.visible {
    opacity: 1;
    transform: translateY(0);
  }

  .time-calculator__breakdown-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--space-xs) 0;
    border-bottom: 1px solid rgba(64, 224, 208, 0.2);
  }

  .time-calculator__breakdown-item:last-child {
    border-bottom: none;
    font-weight: 600;
    color: var(--primary-aqua-dark);
    margin-top: var(--space-sm);
    padding-top: var(--space-sm);
    border-top: 2px solid var(--primary-aqua-light);
  }

  .time-calculator__breakdown-label {
    font-weight: 500;
  }

  .time-calculator__breakdown-value {
    font-weight: 600;
    color: var(--text-primary);
  }

  /* Responsive Design */
  @media (max-width: 767px) {
    .time-calculator__content {
      padding: var(--space-lg);
    }

    .time-calculator__checkbox-label {
      padding: var(--space-sm);
    }

    .time-calculator__checkbox-text {
      font-size: var(--font-size-sm);
    }

    .time-calculator__result-value {
      font-size: var(--font-size-2xl);
    }

    .time-calculator__breakdown-item {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--space-xs);
    }
  }

  /* Accessibility Improvements */
  @media (prefers-reduced-motion: reduce) {
    .time-calculator__checkbox-custom,
    .time-calculator__checkbox-custom::after,
    .time-calculator__result-breakdown,
    .time-calculator__result::before {
      transition: none;
    }

    .time-calculator__calculating {
      animation: none;
    }

    .time-calculator__checkbox-label:hover {
      transform: none;
    }

    .time-calculator__content:hover {
      transform: none;
    }
  }

  /* High Contrast Mode */
  @media (prefers-contrast: high) {
    .time-calculator__title {
      -webkit-text-fill-color: var(--text-primary);
      background: none;
    }

    .time-calculator__checkbox-custom {
      border-width: 3px;
    }

    .time-calculator__content,
    .time-calculator__result {
      border-width: 3px;
    }
  }

  /* Focus Styles */
  .time-calculator__checkbox:focus + .time-calculator__checkbox-custom {
    outline: 2px solid var(--primary-aqua);
    outline-offset: 2px;
  }

  /* Animation for smooth toggle */
  @keyframes checkboxToggle {
    0% {
      transform: translate(-50%, -50%) scale(0) rotate(0deg);
    }
    50% {
      transform: translate(-50%, -50%) scale(1.2) rotate(180deg);
    }
    100% {
      transform: translate(-50%, -50%) scale(1) rotate(360deg);
    }
  }

  .time-calculator__checkbox:checked + .time-calculator__checkbox-custom::after {
    animation: checkboxToggle var(--transition-normal) ease-out;
  }
</style>

<script>
  import { createTimeCalculator } from '../scripts/time-calculator.js';

  // Initialize the time calculator when the component loads
  document.addEventListener('DOMContentLoaded', () => {
    const calculatorElement = document.querySelector('.time-calculator');
    if (!calculatorElement) return;

    const animeData = calculatorElement.dataset.anime ? JSON.parse(calculatorElement.dataset.anime) : null;
    const hasValidAnime = animeData && typeof animeData.episodes === 'number' && animeData.episodes > 0;

    if (!hasValidAnime) return;

    // Get DOM elements
    const openingCheckbox = document.getElementById('include-opening') as HTMLInputElement;
    const endingCheckbox = document.getElementById('include-ending') as HTMLInputElement;
    const totalTimeElement = document.getElementById('total-time');
    const breakdownElement = document.getElementById('time-breakdown');
    const resultElement = document.querySelector('.time-calculator__result');

    if (!openingCheckbox || !endingCheckbox || !totalTimeElement || !breakdownElement) return;

    // Create time calculator instance
    const calculator = createTimeCalculator({
      episodes: animeData.episodes,
      episodeDuration: animeData.duration || 24,
      includeOpening: openingCheckbox.checked,
      includeEnding: endingCheckbox.checked
    });

    // Update display function
    function updateDisplay(result: any, options: any, error?: string) {
      if (error) {
        totalTimeElement.innerHTML = '<span class="time-calculator__error">Error calculating time</span>';
        breakdownElement.classList.remove('visible');
        return;
      }

      if (!result) {
        totalTimeElement.innerHTML = '<span class="time-calculator__calculating">Calculating...</span>';
        breakdownElement.classList.remove('visible');
        return;
      }

      // Add updating animation
      resultElement?.classList.add('updating');
      
      setTimeout(() => {
        // Update total time
        totalTimeElement.textContent = result.formattedTime;

        // Update breakdown
        const breakdown = result.breakdown;
        breakdownElement.innerHTML = `
          <div class="time-calculator__breakdown-item">
            <span class="time-calculator__breakdown-label">Base Time (${breakdown.episodes} episodes × ${breakdown.episodeDuration} min)</span>
            <span class="time-calculator__breakdown-value">${breakdown.baseTime}</span>
          </div>
          ${breakdown.includeOpening ? `
            <div class="time-calculator__breakdown-item">
              <span class="time-calculator__breakdown-label">Opening Themes (${breakdown.episodes} × 1m 30s)</span>
              <span class="time-calculator__breakdown-value">${breakdown.openingTime}</span>
            </div>
          ` : ''}
          ${breakdown.includeEnding ? `
            <div class="time-calculator__breakdown-item">
              <span class="time-calculator__breakdown-label">Ending Themes (${breakdown.episodes} × 1m 30s)</span>
              <span class="time-calculator__breakdown-value">${breakdown.endingTime}</span>
            </div>
          ` : ''}
          <div class="time-calculator__breakdown-item">
            <span class="time-calculator__breakdown-label">Total Watch Time</span>
            <span class="time-calculator__breakdown-value">${result.formattedTime}</span>
          </div>
        `;

        breakdownElement.classList.add('visible');
        resultElement?.classList.remove('updating');
      }, 150);
    }

    // Add change listener
    calculator.addChangeListener(updateDisplay);

    // Handle checkbox changes
    openingCheckbox.addEventListener('change', (e) => {
      const target = e.target as HTMLInputElement;
      calculator.setIncludeOpening(target.checked);
      
      // Add smooth animation to checkbox
      const customCheckbox = target.nextElementSibling as HTMLElement;
      if (customCheckbox) {
        customCheckbox.style.transform = 'scale(1.1)';
        setTimeout(() => {
          customCheckbox.style.transform = '';
        }, 150);
      }
    });

    endingCheckbox.addEventListener('change', (e) => {
      const target = e.target as HTMLInputElement;
      calculator.setIncludeEnding(target.checked);
      
      // Add smooth animation to checkbox
      const customCheckbox = target.nextElementSibling as HTMLElement;
      if (customCheckbox) {
        customCheckbox.style.transform = 'scale(1.1)';
        setTimeout(() => {
          customCheckbox.style.transform = '';
        }, 150);
      }
    });

    // Initial calculation
    calculator.recalculate();

    // Store calculator instance for external access
    (calculatorElement as any).calculator = calculator;
  });

  // Function to update anime data from parent component
  function updateAnimeData(animeData: any) {
    const calculatorElement = document.querySelector('.time-calculator');
    if (!calculatorElement) return;

    // Update data attribute
    calculatorElement.setAttribute('data-anime', animeData ? JSON.stringify(animeData) : '');
    
    // Re-render the component
    renderTimeCalculator(calculatorElement, animeData);
  }

  function renderTimeCalculator(container: Element, animeData: any) {
    const hasValidAnime = animeData && typeof animeData.episodes === 'number' && animeData.episodes > 0;
    
    let content = '';
    
    if (hasValidAnime) {
      content = `
        <div class="time-calculator__content animate-fade-in">
          <div class="time-calculator__header">
            <h3 class="time-calculator__title">Watch Time Calculator</h3>
            <p class="time-calculator__subtitle">Customize your viewing experience</p>
          </div>

          <div class="time-calculator__controls">
            <div class="time-calculator__checkbox-group">
              <label class="time-calculator__checkbox-label">
                <input
                  type="checkbox"
                  class="time-calculator__checkbox"
                  id="include-opening"
                  data-testid="include-opening"
                />
                <span class="time-calculator__checkbox-custom"></span>
                <span class="time-calculator__checkbox-text">
                  Include Opening Themes
                  <span class="time-calculator__checkbox-detail">(+1m 30s per episode)</span>
                </span>
              </label>

              <label class="time-calculator__checkbox-label">
                <input
                  type="checkbox"
                  class="time-calculator__checkbox"
                  id="include-ending"
                  data-testid="include-ending"
                />
                <span class="time-calculator__checkbox-custom"></span>
                <span class="time-calculator__checkbox-text">
                  Include Ending Themes
                  <span class="time-calculator__checkbox-detail">(+1m 30s per episode)</span>
                </span>
              </label>
            </div>
          </div>

          <div class="time-calculator__result" data-testid="calculation-result">
            <div class="time-calculator__result-header">
              <span class="time-calculator__result-label">Total Watch Time</span>
            </div>
            <div class="time-calculator__result-value" id="total-time">
              <span class="time-calculator__calculating">Calculating...</span>
            </div>
            <div class="time-calculator__result-breakdown" id="time-breakdown">
              <!-- Breakdown will be populated by JavaScript -->
            </div>
          </div>
        </div>
      `;
    } else {
      content = `
        <div class="time-calculator__empty">
          <div class="time-calculator__empty-icon">
            <svg width="48" height="48" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z" fill="currentColor"/>
            </svg>
          </div>
          <p class="time-calculator__empty-message">
            Search for an anime to calculate watch time
          </p>
        </div>
      `;
    }

    container.innerHTML = content;
    
    // Re-initialize calculator functionality if anime data is present
    if (hasValidAnime) {
      initializeCalculator(animeData);
    }
  }

  function initializeCalculator(animeData: any) {
    // Wait for DOM to be updated
    setTimeout(() => {
      const openingCheckbox = document.getElementById('include-opening') as HTMLInputElement;
      const endingCheckbox = document.getElementById('include-ending') as HTMLInputElement;
      const totalTimeElement = document.getElementById('total-time');
      const breakdownElement = document.getElementById('time-breakdown');
      const resultElement = document.querySelector('.time-calculator__result');

      if (!openingCheckbox || !endingCheckbox || !totalTimeElement || !breakdownElement) return;

      // Create time calculator instance
      const calculator = createTimeCalculator({
        episodes: animeData.episodes,
        episodeDuration: animeData.duration || 24,
        includeOpening: openingCheckbox.checked,
        includeEnding: endingCheckbox.checked
      });

      // Update display function
      function updateDisplay(result: any, options: any, error?: string) {
        if (error) {
          totalTimeElement.innerHTML = '<span class="time-calculator__error">Error calculating time</span>';
          breakdownElement.classList.remove('visible');
          return;
        }

        if (!result) {
          totalTimeElement.innerHTML = '<span class="time-calculator__calculating">Calculating...</span>';
          breakdownElement.classList.remove('visible');
          return;
        }

        // Add updating animation
        resultElement?.classList.add('updating');
        
        setTimeout(() => {
          // Update total time
          totalTimeElement.textContent = result.formattedTime;

          // Update breakdown
          const breakdown = result.breakdown;
          breakdownElement.innerHTML = \`
            <div class="time-calculator__breakdown-item">
              <span class="time-calculator__breakdown-label">Base Time (\${breakdown.episodes} episodes × \${breakdown.episodeDuration} min)</span>
              <span class="time-calculator__breakdown-value">\${breakdown.baseTime}</span>
            </div>
            \${breakdown.includeOpening ? \`
              <div class="time-calculator__breakdown-item">
                <span class="time-calculator__breakdown-label">Opening Themes (\${breakdown.episodes} × 1m 30s)</span>
                <span class="time-calculator__breakdown-value">\${breakdown.openingTime}</span>
              </div>
            \` : ''}
            \${breakdown.includeEnding ? \`
              <div class="time-calculator__breakdown-item">
                <span class="time-calculator__breakdown-label">Ending Themes (\${breakdown.episodes} × 1m 30s)</span>
                <span class="time-calculator__breakdown-value">\${breakdown.endingTime}</span>
              </div>
            \` : ''}
            <div class="time-calculator__breakdown-item">
              <span class="time-calculator__breakdown-label">Total Watch Time</span>
              <span class="time-calculator__breakdown-value">\${result.formattedTime}</span>
            </div>
          \`;

          breakdownElement.classList.add('visible');
          resultElement?.classList.remove('updating');
        }, 150);
      }

      // Add change listener
      if (calculator && typeof calculator === 'object' && 'addChangeListener' in calculator) {
        (calculator as any).addChangeListener(updateDisplay);
      }

      // Handle checkbox changes
      openingCheckbox.addEventListener('change', (e) => {
        const target = e.target as HTMLInputElement;
        if (calculator && typeof calculator === 'object' && 'setIncludeOpening' in calculator) {
          (calculator as any).setIncludeOpening(target.checked);
        }
        
        // Add smooth animation to checkbox
        const customCheckbox = target.nextElementSibling as HTMLElement;
        if (customCheckbox) {
          customCheckbox.style.transform = 'scale(1.1)';
          setTimeout(() => {
            customCheckbox.style.transform = '';
          }, 150);
        }
      });

      endingCheckbox.addEventListener('change', (e) => {
        const target = e.target as HTMLInputElement;
        if (calculator && typeof calculator === 'object' && 'setIncludeEnding' in calculator) {
          (calculator as any).setIncludeEnding(target.checked);
        }
        
        // Add smooth animation to checkbox
        const customCheckbox = target.nextElementSibling as HTMLElement;
        if (customCheckbox) {
          customCheckbox.style.transform = 'scale(1.1)';
          setTimeout(() => {
            customCheckbox.style.transform = '';
          }, 150);
        }
      });

      // Initial calculation
      if (calculator && typeof calculator === 'object' && 'recalculate' in calculator) {
        (calculator as any).recalculate();
      }

      // Store calculator instance for external access
      const calculatorElement = document.querySelector('.time-calculator');
      if (calculatorElement) {
        (calculatorElement as any).calculator = calculator;
      }
    }, 50);
  }

  // Export for use by parent components
  (window as any).updateTimeCalculator = updateAnimeData;
</script>