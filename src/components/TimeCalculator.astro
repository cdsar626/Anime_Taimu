---
/**
 * TimeCalculator Component
 * Provides time calculation with OP/ED controls and real-time updates
 * Requirements: 4.1, 4.2, 4.3, 4.4, 4.5
 */

export interface Props {
  anime?: {
    episodes: number | null;
    duration: number | null;
  } | null;
  initialIncludeOpening?: boolean;
  initialIncludeEnding?: boolean;
  onCalculationChange?: (result: any) => void;
}

const { 
  anime, 
  initialIncludeOpening = true, 
  initialIncludeEnding = true,
  onCalculationChange 
} = Astro.props;

// Import the time calculator functions
const hasValidAnime = anime && typeof anime.episodes === 'number' && anime.episodes > 0;
---

<div class="time-calculator" data-testid="time-calculator">
  <!-- Always render both states, JavaScript will toggle visibility -->
  <div class="time-calculator__content animate-fade-in" id="calculator-content" style="display: none;">
    <div class="time-calculator__header">
      <h3 class="time-calculator__title">Watch Time Calculator</h3>
      <p class="time-calculator__subtitle">Customize your viewing experience</p>
    </div>

    <div class="time-calculator__controls">
      <div class="time-calculator__checkbox-group">
        <label class="time-calculator__checkbox-label">
          <input
            type="checkbox"
            class="time-calculator__checkbox"
            id="include-opening"
            data-testid="include-opening"
            checked={initialIncludeOpening !== undefined ? initialIncludeOpening : true}
          />
          <span class="time-calculator__checkbox-custom"></span>
          <span class="time-calculator__checkbox-text">
            Watch Opening Themes
            <span class="time-calculator__checkbox-detail">(uncheck to skip and save 1m 30s per episode)</span>
          </span>
        </label>

        <label class="time-calculator__checkbox-label">
          <input
            type="checkbox"
            class="time-calculator__checkbox"
            id="include-ending"
            data-testid="include-ending"
            checked={initialIncludeEnding !== undefined ? initialIncludeEnding : true}
          />
          <span class="time-calculator__checkbox-custom"></span>
          <span class="time-calculator__checkbox-text">
            Watch Ending Themes
            <span class="time-calculator__checkbox-detail">(uncheck to skip and save 1m 30s per episode)</span>
          </span>
        </label>
      </div>
    </div>

    <div class="time-calculator__result" data-testid="calculation-result">
      <div class="time-calculator__result-header">
        <span class="time-calculator__result-label">Total Watch Time</span>
      </div>
      <div class="time-calculator__result-value" id="total-time">
        <span class="time-calculator__calculating">Calculating...</span>
      </div>
      <div class="time-calculator__result-breakdown" id="time-breakdown">
        <!-- Breakdown will be populated by JavaScript -->
      </div>
    </div>
  </div>

  <div class="time-calculator__empty" id="calculator-empty">
    <div class="time-calculator__empty-icon">
      <svg width="48" height="48" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z" fill="currentColor"/>
      </svg>
    </div>
    <p class="time-calculator__empty-message">
      Search for an anime to calculate watch time
    </p>
  </div>
</div>

<style>
  .time-calculator {
    width: 100%;
    max-width: 500px;
    margin: 0 auto;
  }

  /* Empty State */
  .time-calculator__empty {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-md);
    padding: var(--space-2xl);
    text-align: center;
    background: rgba(64, 224, 208, 0.05);
    border: 2px dashed var(--primary-aqua-light);
    border-radius: var(--radius-lg);
  }

  .time-calculator__empty-icon {
    color: var(--text-secondary);
    opacity: 0.6;
  }

  .time-calculator__empty-message {
    color: var(--text-secondary);
    font-size: var(--font-size-lg);
    margin: 0;
  }

  /* Content */
  .time-calculator__content {
    background: linear-gradient(135deg, 
      rgba(0, 206, 209, 0.08) 0%, 
      rgba(72, 209, 204, 0.05) 25%,
      var(--surface) 50%,
      rgba(127, 255, 212, 0.03) 75%,
      rgba(0, 206, 209, 0.06) 100%
    );
    border: 2px solid transparent;
    background-clip: padding-box;
    border-radius: var(--radius-xl);
    padding: var(--space-lg);
    box-shadow: 
      0 20px 40px rgba(0, 206, 209, 0.15),
      0 8px 16px rgba(0, 0, 0, 0.1),
      inset 0 1px 0 rgba(255, 255, 255, 0.3),
      inset 0 -1px 0 rgba(0, 206, 209, 0.1);
    transition: all var(--transition-normal);
    position: relative;
    overflow: hidden;
  }

  .time-calculator__content::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, 
      rgba(0, 206, 209, 0.1) 0%, 
      transparent 50%, 
      rgba(127, 255, 212, 0.08) 100%
    );
    opacity: 0;
    transition: opacity var(--transition-slow);
    pointer-events: none;
    border-radius: var(--radius-xl);
  }

  .time-calculator__content::after {
    content: '';
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    background: linear-gradient(135deg, 
      var(--primary-aqua-light) 0%, 
      var(--primary-aqua) 25%,
      rgba(0, 206, 209, 0.3) 50%,
      var(--primary-aqua) 75%,
      var(--primary-aqua-light) 100%
    );
    border-radius: var(--radius-xl);
    z-index: -1;
    opacity: 0;
    transition: opacity var(--transition-normal);
  }

  .time-calculator__content:hover {
    box-shadow: 
      0 30px 60px rgba(0, 206, 209, 0.25),
      0 12px 24px rgba(0, 0, 0, 0.15),
      inset 0 1px 0 rgba(255, 255, 255, 0.4),
      inset 0 -1px 0 rgba(0, 206, 209, 0.2);
    transform: translateY(-8px) scale(1.02);
  }

  .time-calculator__content:hover::before {
    opacity: 1;
  }

  .time-calculator__content:hover::after {
    opacity: 0.6;
  }

  .time-calculator__header {
    text-align: center;
    margin-bottom: var(--space-lg);
    position: relative;
  }

  .time-calculator__header::before {
    content: '⏱️';
    position: absolute;
    top: -10px;
    left: 50%;
    transform: translateX(-50%);
    font-size: var(--font-size-2xl);
    opacity: 0.8;
    animation: float 3s ease-in-out infinite;
  }

  .time-calculator__title {
    font-size: var(--font-size-xl);
    font-weight: 800;
    background: linear-gradient(135deg, var(--primary-aqua), var(--primary-aqua-light));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin: var(--space-md) 0 var(--space-xs) 0;
    text-shadow: 0 2px 4px rgba(0, 206, 209, 0.3);
    letter-spacing: -0.02em;
    position: relative;
  }

  .time-calculator__title::after {
    content: '';
    position: absolute;
    bottom: -4px;
    left: 50%;
    transform: translateX(-50%);
    width: 60px;
    height: 2px;
    background: linear-gradient(90deg, transparent, var(--primary-aqua), transparent);
    border-radius: var(--radius-full);
  }

  .time-calculator__subtitle {
    font-size: var(--font-size-sm);
    color: var(--text-secondary);
    margin: 0;
    font-style: italic;
    font-weight: 600;
    opacity: 0.9;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }

  /* Controls */
  .time-calculator__controls {
    margin-bottom: var(--space-md);
  }

  .time-calculator__checkbox-group {
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
  }

  .time-calculator__checkbox-label {
    display: flex;
    align-items: flex-start;
    gap: var(--space-md);
    cursor: pointer;
    padding: var(--space-md);
    border-radius: var(--radius-lg);
    transition: all var(--transition-fast);
    position: relative;
    background: linear-gradient(135deg, 
      rgba(0, 206, 209, 0.12) 0%, 
      rgba(72, 209, 204, 0.08) 50%,
      rgba(127, 255, 212, 0.06) 100%
    );
    border: 1px solid rgba(0, 206, 209, 0.2);
    box-shadow: 
      0 4px 12px rgba(0, 206, 209, 0.15), 
      inset 0 1px 0 rgba(255, 255, 255, 0.2),
      inset 0 -1px 0 rgba(0, 206, 209, 0.05);
    overflow: hidden;
  }

  .time-calculator__checkbox-label::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, 
      transparent, 
      rgba(255, 255, 255, 0.2), 
      transparent
    );
    transition: left var(--transition-slow);
  }

  .time-calculator__checkbox-label:hover {
    background: linear-gradient(135deg, 
      rgba(0, 206, 209, 0.18) 0%, 
      rgba(72, 209, 204, 0.12) 50%,
      rgba(127, 255, 212, 0.08) 100%
    );
    transform: translateX(8px) translateY(-4px) scale(1.02);
    box-shadow: 
      0 12px 24px rgba(0, 206, 209, 0.25), 
      inset 0 1px 0 rgba(255, 255, 255, 0.3),
      inset 0 -1px 0 rgba(0, 206, 209, 0.1);
    border-color: rgba(0, 206, 209, 0.4);
  }

  .time-calculator__checkbox-label:hover::before {
    left: 100%;
  }

  .time-calculator__checkbox-label:active {
    transform: translateX(2px);
  }

  .time-calculator__checkbox-label:focus-within {
    outline: 2px solid var(--primary-aqua);
    outline-offset: 2px;
  }

  .time-calculator__checkbox {
    position: absolute;
    opacity: 0;
    width: 0;
    height: 0;
  }

  .time-calculator__checkbox-custom {
    width: 24px;
    height: 24px;
    border: 2px solid var(--primary-aqua-light);
    border-radius: var(--radius-md);
    background: linear-gradient(135deg, var(--surface), rgba(255, 255, 255, 0.8));
    position: relative;
    transition: all var(--transition-normal);
    flex-shrink: 0;
    margin-top: 2px;
    box-shadow: 
      0 2px 8px rgba(0, 206, 209, 0.2),
      inset 0 1px 0 rgba(255, 255, 255, 0.5);
  }

  .time-calculator__checkbox-custom::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 16px;
    height: 16px;
    border-radius: var(--radius-sm);
    background: linear-gradient(135deg, 
      rgba(0, 206, 209, 0.1), 
      rgba(72, 209, 204, 0.05)
    );
    opacity: 0;
    transition: all var(--transition-normal);
  }

  .time-calculator__checkbox-custom::after {
    content: '✓';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0) rotate(-180deg);
    font-size: 14px;
    font-weight: 900;
    color: white;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
    transition: all var(--transition-normal);
  }

  .time-calculator__checkbox:checked + .time-calculator__checkbox-custom {
    background: linear-gradient(135deg, var(--primary-aqua), var(--primary-aqua-light));
    border-color: var(--primary-aqua-dark);
    box-shadow: 
      0 0 0 3px rgba(0, 206, 209, 0.3), 
      0 6px 12px rgba(0, 206, 209, 0.4),
      inset 0 1px 0 rgba(255, 255, 255, 0.3);
    transform: scale(1.1);
  }

  .time-calculator__checkbox:checked + .time-calculator__checkbox-custom::before {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1.2);
  }

  .time-calculator__checkbox:checked + .time-calculator__checkbox-custom::after {
    transform: translate(-50%, -50%) scale(1) rotate(0deg);
  }

  .time-calculator__checkbox-text {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: var(--space-xs);
    font-size: var(--font-size-base);
    font-weight: 700;
    color: var(--text-primary);
    line-height: 1.3;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }

  .time-calculator__checkbox-detail {
    font-size: var(--font-size-sm);
    color: var(--text-secondary);
    font-weight: 500;
    font-style: italic;
    opacity: 0.8;
    margin-top: var(--space-xs);
    padding: var(--space-xs) var(--space-sm);
    background: rgba(0, 206, 209, 0.05);
    border-radius: var(--radius-sm);
    border-left: 3px solid var(--primary-aqua-light);
  }

  /* Result Display */
  .time-calculator__result {
    background: linear-gradient(135deg, 
      rgba(0, 206, 209, 0.25) 0%,
      rgba(72, 209, 204, 0.15) 25%,
      rgba(127, 255, 212, 0.12) 50%,
      rgba(0, 206, 209, 0.18) 75%,
      rgba(64, 224, 208, 0.2) 100%
    );
    border: 2px solid rgba(0, 206, 209, 0.3);
    border-radius: var(--radius-xl);
    padding: var(--space-lg);
    text-align: center;
    position: relative;
    overflow: hidden;
    box-shadow: 
      0 16px 32px rgba(0, 206, 209, 0.3),
      0 8px 16px rgba(0, 0, 0, 0.1),
      inset 0 2px 0 rgba(255, 255, 255, 0.4),
      inset 0 -2px 0 rgba(0, 206, 209, 0.2);
    transition: all var(--transition-normal);
  }

  .time-calculator__result::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: conic-gradient(
      from 0deg,
      transparent 0deg,
      rgba(0, 206, 209, 0.1) 90deg,
      rgba(127, 255, 212, 0.15) 180deg,
      rgba(0, 206, 209, 0.1) 270deg,
      transparent 360deg
    );
    animation: rotate 8s linear infinite;
    opacity: 0.6;
  }

  .time-calculator__result::after {
    content: '';
    position: absolute;
    top: 4px;
    left: 4px;
    right: 4px;
    bottom: 4px;
    background: inherit;
    border-radius: var(--radius-lg);
    z-index: 1;
  }

  .time-calculator__result:hover {
    box-shadow: 
      0 24px 48px rgba(0, 206, 209, 0.4),
      0 12px 24px rgba(0, 0, 0, 0.15),
      inset 0 2px 0 rgba(255, 255, 255, 0.5),
      inset 0 -2px 0 rgba(0, 206, 209, 0.3);
    transform: translateY(-4px) scale(1.02);
    border-color: rgba(0, 206, 209, 0.5);
  }

  .time-calculator__result.updating::before {
    animation-duration: 2s;
  }

  .time-calculator__result-header {
    margin-bottom: var(--space-sm);
    position: relative;
    z-index: 2;
  }

  .time-calculator__result-label {
    font-size: var(--font-size-sm);
    font-weight: 700;
    background: linear-gradient(135deg, var(--primary-aqua-dark), var(--primary-aqua));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.9;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }

  .time-calculator__result-value {
    font-size: var(--font-size-3xl);
    font-weight: 900;
    background: linear-gradient(135deg, 
      var(--text-primary) 0%,
      var(--primary-aqua-dark) 50%,
      var(--text-primary) 100%
    );
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin-bottom: var(--space-md);
    min-height: 3rem;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    text-shadow: 0 4px 8px rgba(0, 206, 209, 0.4);
    line-height: 1;
    z-index: 2;
    letter-spacing: -0.02em;
  }

  .time-calculator__calculating {
    font-size: var(--font-size-sm);
    color: var(--text-secondary);
    font-weight: 400;
    opacity: 0.8;
    animation: pulse 2s infinite;
  }

  .time-calculator__result-breakdown {
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
    font-size: var(--font-size-sm);
    color: var(--text-secondary);
    opacity: 0;
    transform: translateY(20px);
    transition: all var(--transition-slow);
    position: relative;
    z-index: 2;
    background: rgba(255, 255, 255, 0.1);
    border-radius: var(--radius-lg);
    padding: var(--space-md);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .time-calculator__result-breakdown.visible {
    opacity: 1;
    transform: translateY(0);
    animation: slideInUp 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  @keyframes slideInUp {
    0% {
      opacity: 0;
      transform: translateY(30px) scale(0.95);
    }
    100% {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  .time-calculator__breakdown-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--space-sm) var(--space-md);
    border-bottom: 1px solid rgba(64, 224, 208, 0.15);
    border-radius: var(--radius-md);
    background: linear-gradient(135deg, 
      rgba(255, 255, 255, 0.05) 0%,
      rgba(0, 206, 209, 0.03) 100%
    );
    transition: all var(--transition-fast);
    position: relative;
    overflow: hidden;
  }

  .time-calculator__breakdown-item::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 3px;
    background: linear-gradient(135deg, var(--primary-aqua), var(--primary-aqua-light));
    opacity: 0;
    transition: opacity var(--transition-fast);
  }

  .time-calculator__breakdown-item:hover {
    background: linear-gradient(135deg, 
      rgba(255, 255, 255, 0.1) 0%,
      rgba(0, 206, 209, 0.08) 100%
    );
    transform: translateX(4px);
  }

  .time-calculator__breakdown-item:hover::before {
    opacity: 1;
  }

  .time-calculator__breakdown-item:last-child {
    border-bottom: none;
    font-weight: 700;
    background: linear-gradient(135deg, 
      rgba(0, 206, 209, 0.15) 0%,
      rgba(72, 209, 204, 0.1) 100%
    );
    margin-top: var(--space-sm);
    padding: var(--space-md);
    border-top: 2px solid var(--primary-aqua-light);
    border-radius: var(--radius-lg);
    box-shadow: 0 4px 8px rgba(0, 206, 209, 0.2);
  }

  .time-calculator__breakdown-item:last-child::before {
    width: 4px;
    opacity: 1;
  }

  .time-calculator__breakdown-label {
    font-weight: 600;
    color: var(--text-primary);
    opacity: 0.9;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }

  .time-calculator__breakdown-value {
    font-weight: 800;
    background: linear-gradient(135deg, var(--primary-aqua-dark), var(--primary-aqua));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    font-size: var(--font-size-base);
    text-shadow: 0 1px 2px rgba(0, 206, 209, 0.3);
  }

  /* Animations */
  @keyframes float {
    0%, 100% {
      transform: translateX(-50%) translateY(0px);
    }
    50% {
      transform: translateX(-50%) translateY(-8px);
    }
  }

  @keyframes rotate {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  @keyframes pulse {
    0%, 100% {
      opacity: 0.8;
    }
    50% {
      opacity: 0.4;
    }
  }

  /* Responsive Design */
  @media (max-width: 767px) {
    .time-calculator__content {
      padding: var(--space-md);
    }

    .time-calculator__title {
      font-size: var(--font-size-lg);
    }

    .time-calculator__checkbox-label {
      padding: var(--space-sm);
    }

    .time-calculator__checkbox-text {
      font-size: var(--font-size-sm);
    }

    .time-calculator__result {
      padding: var(--space-md);
    }

    .time-calculator__result-value {
      font-size: var(--font-size-xl);
      min-height: 2rem;
    }

    .time-calculator__breakdown-item {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--space-xs);
    }

    .time-calculator__breakdown-value {
      font-size: var(--font-size-sm);
    }
  }

  /* Accessibility Improvements */
  @media (prefers-reduced-motion: reduce) {
    .time-calculator__checkbox-custom,
    .time-calculator__checkbox-custom::after,
    .time-calculator__result-breakdown,
    .time-calculator__result::before {
      transition: none;
    }

    .time-calculator__calculating {
      animation: none;
    }

    .time-calculator__checkbox-label:hover {
      transform: none;
    }

    .time-calculator__content:hover {
      transform: none;
    }
  }

  /* High Contrast Mode */
  @media (prefers-contrast: high) {
    .time-calculator__title {
      -webkit-text-fill-color: var(--text-primary);
      background: none;
    }

    .time-calculator__checkbox-custom {
      border-width: 3px;
    }

    .time-calculator__content,
    .time-calculator__result {
      border-width: 3px;
    }
  }

  /* Focus Styles */
  .time-calculator__checkbox:focus + .time-calculator__checkbox-custom {
    outline: 2px solid var(--primary-aqua);
    outline-offset: 2px;
  }
</style>

<script>
  import { createTimeCalculator } from '../scripts/time-calculator.js';

  // Global calculator instance
  let globalCalculator = null;

  // Initialize the time calculator when the component loads
  function initializeTimeCalculator() {
    const calculatorElement = document.querySelector('.time-calculator');
    if (!calculatorElement) return;

    // Get DOM elements
    const openingCheckbox = document.getElementById('include-opening');
    const endingCheckbox = document.getElementById('include-ending');
    const totalTimeElement = document.getElementById('total-time');
    const breakdownElement = document.getElementById('time-breakdown');
    const resultElement = document.querySelector('.time-calculator__result');

    if (!openingCheckbox || !endingCheckbox || !totalTimeElement || !breakdownElement) return;

    // Create time calculator instance (initially with no data)
    globalCalculator = createTimeCalculator({
      episodes: 0,
      episodeDuration: 24,
      includeOpening: openingCheckbox.checked,
      includeEnding: endingCheckbox.checked
    });

    // Update display function
    function updateDisplay(result, options, error) {
      if (error) {
        totalTimeElement.innerHTML = '<span class="time-calculator__error">Error calculating time</span>';
        breakdownElement.classList.remove('visible');
        return;
      }

      if (!result) {
        totalTimeElement.innerHTML = '<span class="time-calculator__calculating">Calculating...</span>';
        breakdownElement.classList.remove('visible');
        return;
      }

      // Add updating animation
      resultElement?.classList.add('updating');
      
      setTimeout(() => {
        // Update total time
        totalTimeElement.textContent = result.formattedTime;

        // Update breakdown
        const breakdown = result.breakdown;
        breakdownElement.innerHTML = `
          <div class="time-calculator__breakdown-item">
            <span class="time-calculator__breakdown-label">Base Time (${breakdown.episodes} episodes × ${breakdown.episodeDuration} min)</span>
            <span class="time-calculator__breakdown-value">${breakdown.baseTime}</span>
          </div>
          ${!breakdown.includeOpening ? `
            <div class="time-calculator__breakdown-item">
              <span class="time-calculator__breakdown-label">Time Saved by Skipping Openings (${breakdown.episodes} × 1m 30s)</span>
              <span class="time-calculator__breakdown-value">-${breakdown.openingTime}</span>
            </div>
          ` : ''}
          ${!breakdown.includeEnding ? `
            <div class="time-calculator__breakdown-item">
              <span class="time-calculator__breakdown-label">Time Saved by Skipping Endings (${breakdown.episodes} × 1m 30s)</span>
              <span class="time-calculator__breakdown-value">-${breakdown.endingTime}</span>
            </div>
          ` : ''}
          <div class="time-calculator__breakdown-item">
            <span class="time-calculator__breakdown-label">Total Watch Time</span>
            <span class="time-calculator__breakdown-value">${result.formattedTime}</span>
          </div>
        `;

        breakdownElement.classList.add('visible');
        resultElement?.classList.remove('updating');
      }, 150);
    }

    // Add change listener
    globalCalculator.addChangeListener(updateDisplay);

    // Handle checkbox changes
    openingCheckbox.addEventListener('change', (e) => {
      const target = e.target;
      globalCalculator.setIncludeOpening(target.checked);
      
      // Add smooth animation to checkbox
      const customCheckbox = target.nextElementSibling;
      if (customCheckbox) {
        customCheckbox.style.transform = 'scale(1.1)';
        setTimeout(() => {
          customCheckbox.style.transform = '';
        }, 150);
      }
    });

    endingCheckbox.addEventListener('change', (e) => {
      const target = e.target;
      globalCalculator.setIncludeEnding(target.checked);
      
      // Add smooth animation to checkbox
      const customCheckbox = target.nextElementSibling;
      if (customCheckbox) {
        customCheckbox.style.transform = 'scale(1.1)';
        setTimeout(() => {
          customCheckbox.style.transform = '';
        }, 150);
      }
    });

    // Store calculator instance for external access
    calculatorElement.calculator = globalCalculator;
    
    // Function to toggle between empty and content states
    function toggleCalculatorState(hasData) {
      const contentElement = document.getElementById('calculator-content');
      const emptyElement = document.getElementById('calculator-empty');
      
      if (hasData) {
        contentElement.style.display = 'block';
        emptyElement.style.display = 'none';
      } else {
        contentElement.style.display = 'none';
        emptyElement.style.display = 'flex';
      }
    }

    // Make it globally accessible for updates from parent
    window.updateTimeCalculatorData = function(animeData) {
      if (globalCalculator) {
        if (animeData && animeData.episodes > 0) {
          globalCalculator.updateAnime(animeData);
          toggleCalculatorState(true);
        } else {
          toggleCalculatorState(false);
        }
      }
    };

    // Initialize with empty state
    toggleCalculatorState(false);
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', initializeTimeCalculator);
</script>