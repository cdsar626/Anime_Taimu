---
/**
 * Main Index Page - Anime Time Calculator
 * Integrates all components with responsive layout and state management
 * Requirements: 5.4, 2.1
 */

// Import global styles and components
import '../styles/global.css';
import AnimeSearch from '../components/AnimeSearch.astro';
import AnimeDisplay from '../components/AnimeDisplay.astro';
import TimeCalculator from '../components/TimeCalculator.astro';

---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Anime Time Calculator</title>
		<meta name="description" content="Calculate the total time needed to watch your favorite anime series with opening and ending themes" />
		
		<!-- Open Graph Meta Tags -->
		<meta property="og:title" content="Anime Time Calculator" />
		<meta property="og:description" content="Calculate the total time needed to watch your favorite anime series" />
		<meta property="og:type" content="website" />
		
		<!-- Preload critical resources -->
		<link rel="preconnect" href="https://graphql.anilist.co" />
		<link rel="dns-prefetch" href="https://s4.anilist.co" />
	</head>
	<body>
		<div class="app-container">
			<!-- Header Section -->
			<header class="app-header">
				<div class="header-content">
					<h1 class="app-title animate-fade-in">
						<span class="title-gradient">Anime Time Calculator</span>
					</h1>
					<p class="app-subtitle animate-slide-up">
						Calculate the total time needed to watch your favorite anime series
					</p>
				</div>
			</header>
			
			<!-- Main Content -->
			<main class="app-main">
				<!-- Content Grid - Anime Display and Time Calculator -->
				<div class="content-grid" id="content-grid">
					<!-- Anime Display Section -->
					<section class="anime-section" id="anime-section">
						<AnimeDisplay />
					</section>
					
					<!-- Time Calculator Section -->
					<section class="calculator-section" id="calculator-section">
						<TimeCalculator />
					</section>

				</div>
				
				<!-- Search Section - Now Below -->
				<section class="search-section animate-scale-in">
					<AnimeSearch />
				</section>
				

			</main>
			
			<!-- Footer -->
			<footer class="app-footer">
				<div class="footer-content">
					<p class="footer-text">
						Data provided by <a href="https://anilist.co" target="_blank" rel="noopener noreferrer" class="footer-link">AniList</a>
					</p>
				</div>
			</footer>
		</div>

		<style>
			/* App Layout Styles */
			.app-container {
				min-height: 100vh;
				display: flex;
				flex-direction: column;
				background: var(--background);
			}

			/* Enhanced Header Styles */
			.app-header {
				padding: var(--space-md) var(--space-lg);
				text-align: center;
				background: linear-gradient(135deg, rgba(64, 224, 208, 0.12), rgba(127, 255, 212, 0.06));
				border-bottom: 2px solid rgba(64, 224, 208, 0.3);
				position: relative;
				overflow: hidden;
				box-shadow: 0 2px 10px rgba(64, 224, 208, 0.1);
			}

			.app-header::before {
				content: '';
				position: absolute;
				top: 0;
				left: -100%;
				width: 100%;
				height: 100%;
				background: linear-gradient(90deg, transparent, rgba(64, 224, 208, 0.05), transparent);
				animation: shimmer 3s ease-in-out infinite;
			}

			.header-content {
				max-width: 800px;
				margin: 0 auto;
			}

			.app-title {
				font-size: var(--font-size-2xl);
				font-weight: 800;
				margin: 0 0 var(--space-sm) 0;
				line-height: 1.1;
				position: relative;
				z-index: 1;
			}

			.title-gradient {
				color: var(--text-primary);
				text-shadow: 0 4px 8px rgba(0, 206, 209, 0.3);
				position: relative;
			}

			.title-gradient::after {
				content: '';
				position: absolute;
				top: 0;
				left: 0;
				right: 0;
				bottom: 0;
				background: linear-gradient(135deg, var(--primary-aqua-light), var(--primary-aqua));
				-webkit-background-clip: text;
				-webkit-text-fill-color: transparent;
				background-clip: text;
				opacity: 0;
				transition: opacity var(--transition-slow);
			}

			.app-subtitle {
				font-size: var(--font-size-sm);
				color: var(--text-primary);
				margin: 0;
				font-weight: 500;
				line-height: 1.3;
				opacity: 0.9;
			}

			/* Main Content Styles */
			.app-main {
				flex: 1;
				padding: var(--space-sm) var(--space-lg);
				max-width: 1200px;
				margin: 0 auto;
				width: 100%;
			}

			.search-section {
				margin-top: var(--space-sm);
				margin-bottom: var(--space-sm);
			}

			.content-grid {
				display: flex;
				flex-direction: column;
				gap: var(--space-sm);
				margin-bottom: var(--space-sm);
				opacity: 1;
			}

			.content-grid.visible {
				animation: fadeIn var(--transition-slow) ease-out;
			}

			.anime-section {
				opacity: 1;
				transform: translateY(0);
				transition: all var(--transition-slow);
				display: flex;
				justify-content: center;
			}

			.calculator-section {
				opacity: 1;
				transform: translateY(0);
				transition: all var(--transition-slow);
				max-width: 800px;
				margin: 0 auto;
			}

			/* Empty State Styles */
			.empty-state {
				display: none;
				justify-content: center;
				align-items: center;
				min-height: 200px;
				padding: var(--space-lg);
			}

			.empty-state.visible {
				display: flex;
			}

			.empty-state-content {
				text-align: center;
				max-width: 500px;
			}

			.empty-state-icon {
				color: var(--primary-aqua-light);
				margin-bottom: var(--space-lg);
				opacity: 0.8;
			}

			.empty-state-title {
				font-size: var(--font-size-xl);
				font-weight: 700;
				color: var(--text-primary);
				margin: 0 0 var(--space-sm) 0;
				text-shadow: 0 1px 2px rgba(0, 206, 209, 0.2);
			}

			.empty-state-description {
				font-size: var(--font-size-sm);
				color: var(--text-secondary);
				margin: 0;
				line-height: 1.4;
				font-weight: 500;
				opacity: 0.9;
			}

			/* Enhanced Footer Styles */
			.app-footer {
				padding: var(--space-lg);
				text-align: center;
				border-top: 1px solid rgba(64, 224, 208, 0.15);
				background: linear-gradient(135deg, rgba(64, 224, 208, 0.03), rgba(127, 255, 212, 0.01));
				position: relative;
			}

			.footer-content {
				max-width: 800px;
				margin: 0 auto;
			}

			.footer-text {
				font-size: var(--font-size-sm);
				color: var(--text-secondary);
				margin: 0;
			}

			.footer-link {
				color: var(--primary-aqua-dark);
				text-decoration: none;
				font-weight: 500;
				transition: all var(--transition-normal);
				position: relative;
				padding: var(--space-xs) var(--space-sm);
				border-radius: var(--radius-sm);
			}

			.footer-link::before {
				content: '';
				position: absolute;
				bottom: 0;
				left: 50%;
				width: 0;
				height: 2px;
				background: linear-gradient(90deg, var(--primary-aqua), var(--primary-aqua-light));
				transition: all var(--transition-normal);
				transform: translateX(-50%);
			}

			.footer-link:hover {
				color: var(--primary-aqua);
				background: var(--interactive-hover);
				transform: translateY(-1px);
			}

			.footer-link:hover::before {
				width: 100%;
			}

			/* Responsive Design */
			@media (max-width: 767px) {
				.app-header {
					padding: var(--space-xl) var(--space-md);
				}

				.app-title {
					font-size: var(--font-size-3xl);
				}

				.app-subtitle {
					font-size: var(--font-size-lg);
				}

				.app-main {
					padding: var(--space-lg) var(--space-md);
				}

				.empty-state-title {
					font-size: var(--font-size-2xl);
				}

				.empty-state-description {
					font-size: var(--font-size-base);
				}
			}

			@media (min-width: 768px) {
				.app-header {
					padding: var(--space-3xl) var(--space-lg);
				}

				.content-grid {
					gap: var(--space-3xl);
				}

				.empty-state {
					min-height: 70vh;
					display: flex;
					align-items: center;
					justify-content: center;
				}
			}

			@media (min-width: 1024px) {
				.app-main {
					padding: var(--space-xl) var(--space-lg);
				}

				.search-section {
					margin-top: var(--space-xl);
					margin-bottom: var(--space-lg);
				}

				.content-grid {
					gap: var(--space-xl);
				}
			}

			/* High Contrast Mode */
			@media (prefers-contrast: high) {
				.title-gradient {
					-webkit-text-fill-color: var(--text-primary);
					background: none;
				}

				.app-header,
				.app-footer {
					border-width: 2px;
				}
			}

			/* New Keyframe Animations */
			@keyframes shimmer {
				0% { left: -100%; }
				100% { left: 100%; }
			}

			@keyframes gradientShift {
				0%, 100% { background-position: 0% 50%; }
				50% { background-position: 100% 50%; }
			}

			/* Reduced Motion */
			@media (prefers-reduced-motion: reduce) {
				.animate-fade-in,
				.animate-slide-up,
				.animate-scale-in {
					animation: none;
				}

				.content-grid.visible .anime-section,
				.content-grid.visible .calculator-section {
					transition: none;
				}

				.app-header::before,
				.title-gradient {
					animation: none;
				}
			}

			/* Print Styles */
			@media print {
				.app-header,
				.app-footer {
					background: none;
					border: none;
				}

				.empty-state {
					display: none;
				}
			}
		</style>

		<script>
			/**
			 * Main Application State Management
			 * Handles communication between components and UI state updates
			 */

			class AnimeTimeCalculatorApp {
				constructor() {
					this.currentAnime = null;
					this.isLoading = false;
					this.error = null;
					
					// Get DOM elements
					this.contentGrid = document.getElementById('content-grid');
					this.animeSection = document.getElementById('anime-section');
					this.calculatorSection = document.getElementById('calculator-section');
					
					this.init();
				}

				init() {
					// Listen for search results
					document.addEventListener('animeSearchResult', this.handleSearchResult.bind(this));
					
					// Initialize - content grid is always visible now
				}

				handleSearchResult(event) {
					const { data, error, searchTerm } = event.detail;
					
					if (data) {
						this.setAnime(data);
					} else if (error) {
						this.setError(error);
					}
				}

				setAnime(animeData) {
					this.currentAnime = animeData;
					this.error = null;
					this.isLoading = false;
					
					// Update anime display component
					this.updateAnimeDisplay(animeData, false, null);
					
					// Update time calculator component
					this.updateTimeCalculator(animeData);
					
					// Show content grid
					this.showContentGrid();
					
					// Preload anime image for better UX
					if (window.preloadAnimeImage && animeData.coverImage.large) {
						window.preloadAnimeImage(animeData.coverImage.large);
					}
				}

				setError(error) {
					this.currentAnime = null;
					this.error = error;
					this.isLoading = false;
					
					// Update anime display with error
					this.updateAnimeDisplay(null, false, error);
					
					// Update time calculator with no data
					this.updateTimeCalculator(null);
					
					// Show content grid to display error
					this.showContentGrid();
				}

				setLoading(loading) {
					this.isLoading = loading;
					
					if (loading) {
						// Update anime display with loading state
						this.updateAnimeDisplay(null, true, null);
						
						// Show content grid
						this.showContentGrid();
					}
				}

				showContentGrid() {
					// Content grid is always visible now - AnimeDisplay handles its own states
				}

				updateAnimeDisplay(anime, isLoading, error) {
					console.log('Anime data received:', anime);
					
					// Use the component's own rendering function to maintain consistent styling
					if (window.updateAnimeDisplay) {
						window.updateAnimeDisplay(anime, isLoading, error);
					}
				}

				updateTimeCalculator(anime) {
					// Use the global function exposed by TimeCalculator component
					if (window.updateTimeCalculatorData) {
						window.updateTimeCalculatorData(anime);
					}
					
					// Also store data for component to access (fallback)
					const calculatorElement = document.querySelector('.time-calculator');
					if (calculatorElement) {
						calculatorElement.dataset.anime = anime ? JSON.stringify(anime) : '';
						
						// Try direct calculator access as fallback
						const calculator = calculatorElement.calculator;
						if (calculator && anime) {
							calculator.updateAnime(anime);
						}
					}
				}

				// Public API methods
				getCurrentAnime() {
					return this.currentAnime;
				}

				getLoadingState() {
					return this.isLoading;
				}

				getError() {
					return this.error;
				}
			}

			// Initialize the application when DOM is ready
			document.addEventListener('DOMContentLoaded', async () => {
				window.animeApp = new AnimeTimeCalculatorApp();
				
				// Show empty state initially - user can search manually
				console.log('Anime Time Calculator initialized - ready for search');
			});

			// Handle loading states from search component
			document.addEventListener('animeSearchLoading', (event) => {
				if (window.animeApp) {
					window.animeApp.setLoading(event.detail.loading);
				}
			});

			// Smooth scroll to content when anime is loaded
			document.addEventListener('animeSearchResult', (event) => {
				if (event.detail.data) {
					setTimeout(() => {
						const contentGrid = document.getElementById('content-grid');
						if (contentGrid) {
							contentGrid.scrollIntoView({ 
								behavior: 'smooth', 
								block: 'start' 
							});
						}
					}, 300);
				}
			});
		</script>
	</body>
</html>
